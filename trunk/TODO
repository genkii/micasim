-*- outline -*-

* Details of Simulation
** Implement GGL Integrator (Farr & Bertschinger)

** Check integrator energy-scaling behavior:
*** Hermite: 4th order
It probably works (I see fourth order behavior in simple tests).
However, a large simulation using Hermite dissipates energy pretty
severely (should probably reduce the timestep a bit to make this
really work).

** Units
Should come to some sort of standard units.  The usual choice is M_tot
= 1, G = 1, and E = -1/4 (this last makes <1/r_ij> = 1, where <...>
refers to the average over pairs).  The real question is when to apply
the unit corrections---the simulator may not have a well-defined
"beginning" of a simulation, since people can rez prims at basically
any time.

** Energy HUD (instead of output to INFO log)

** Velocity in ICs
Add ability to set the velocity (maybe with a script on the prim?) in
the initial conditions.

** Allow Adaptive Timesteps
Probably allow steps which are power-of-two fractions of the simulator
timestep.

* Forward-thinking

** API for External Code
We want to implement an API so that we can communicate with others'
n-body code (already written).

** Script Physics
Maybe write a physics engine which queries prims about whether they
would like to supply their own physics, or use a default engine.
Would allow to put the simulation code into the prims rather than a
plugin.

** Visualization 

*** Visualize 4-D data
Simulation data comes in 4-D (3 space and 1 time).  Allow those four
dimensions to be mapped onto the four dimensions of the virtual world
in any arbitrary way.  For example, allow for visualization of the
evolution of an orbiting system with x -> x, y -> y, and t -> z.  As
the system evolves in time, the image in the virtual world becomes a
double-helix running up the z-axis.
